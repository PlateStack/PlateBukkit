/*
 *  Copyright (C) 2017 José Roberto de Araújo Júnior
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

group 'org.platestack'
version = "0.1.0-SNAPSHOT"

buildscript {
    ext.kotlin_version = '1.1.2-4'
    ext.dokka_version = '0.9.13'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        //noinspection DifferentKotlinGradleVersion
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.junit.platform.gradle.plugin'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://dl.bintray.com/jetbrains/spek' }
    maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    mavenLocal()
}

configurations {
    compileBoot

    compileInitial {
        extendsFrom compileBoot
    }

    compileScanner {
        extendsFrom compileBoot
    }

    compile {
        extendsFrom compileBoot, compileScanner
    }
}

sourceSets {
    boot {
        java.srcDirs = ['src/boot/java']
        kotlin.srcDirs = []
        resources.srcDirs = ['src/boot/resources']
        compileClasspath = configurations.compileBoot
    }

    scanner {
        java.srcDirs = ['src/scanner/java']
        kotlin.srcDirs = ['src/scanner/kotlin']
        resources.srcDirs = ['src/scanner/resources']
        compileClasspath = configurations.compileScanner
    }

    initial {
        java.srcDirs = ['src/initial/java']
        kotlin.srcDirs = []
        resources.srcDirs = ['src/initial/resources']
        compileClasspath = configurations.compileInitial
    }
}

dependencies {
    compileBoot 'org.bukkit:bukkit:1.12-pre5-SNAPSHOT'

    compileInitial sourceSets.boot.output
    compileInitial project(':library-loader')

    compileScanner sourceSets.boot.output
    compileScanner project(path: ':plate-api', configuration: 'util')
    compileScanner "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compileScanner "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compileScanner 'org.ow2.asm:asm-tree:5.2'
    compileScanner 'org.ow2.asm:asm-commons:5.2'

    compile sourceSets.scanner.output
    compile project(':plate-common')
    compile 'org.slf4j:slf4j-simple:1.7.25'
    //compile 'org.eclipse.jgit:org.eclipse.jgit:4.7.0.201704051617-r'

    testCompile sourceSets.initial.output
    testCompile 'org.mockito:mockito-core:1.+'
    testCompile 'org.jetbrains.spek:spek-api:1.1.1'
    testCompile 'org.junit.platform:junit-platform-runner:1.0.0-M4'
    testRuntime 'org.jetbrains.spek:spek-junit-platform-engine:1.1.1'
    compile 'org.bukkit:craftbukkit:1.11.2-R0.1-SNAPSHOT'
}

jar {
    from {
        ["CHANGELOG.md", "LICENSE.txt", "LICENSE-LIBRARIES.md"]
    }
}

task initialJar(type: Jar, dependsOn: ':initialClasses') {
    classifier = 'initial'
    from(sourceSets.initial.output)
}

task bootJar(type: Jar, dependsOn: [':initialClasses', ':classes', ':plate-common:classes', ':plate-api:classes', ':bootClasses', ':library-loader:classes']) {
    classifier = 'all'
    into('META-INF/modules') {
        into('initial') {
            from sourceSets.initial.output
        }

        into('library-loader') {
            from { project(':library-loader').sourceSets.main.output }
        }

        into('main') {
            from sourceSets.main.output
            from { project(':plate-api:immutable-collections').sourceSets.main.output }
            from { project(':plate-common').sourceSets.main.output }
            from { project(':plate-api').sourceSets.main.output }
        }

        into('util') {
            from { project(path: ':plate-api').sourceSets.util.output }
        }
    }

    from(sourceSets.boot.output)
    from {
        ["CHANGELOG.md", "LICENSE.txt", "LICENSE-LIBRARIES.md"]
    }
}

build.finalizedBy bootJar

configure([bootJar, initialJar]) {
    group = 'build'
}

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

dokka {
    linkMapping {
        dir = "src/main/kotlin"
        url = "https://github.com/PlateStack/PlateBukkit/blob/master/src/main/kotlin"
        suffix = "#L"
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = "javadoc"
    outputDirectory = "$buildDir/javadoc"
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
